user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml text/x-js text/x-cross-domain-policy application/x-font-ttf application/x-font-opentype application/vnd.ms-fontobject image/x-icon;

    # Upstream definitions for each service
    {{range .Services}}{{if .Domain}}
    upstream {{.Name}}_backend {
        server {{.Name}}:{{.Port}};
    }
    {{end}}{{end}}

    # Default server to catch undefined hosts
    server {
        listen 80 default_server;
        {{if .HasSSL}}listen 443 ssl default_server;{{end}}
        server_name _;
        
        {{if .HasSSL}}# Use a self-signed cert for default server (to handle SSL handshake)
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        {{end}}
        return 444;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name localhost;
        
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }
    }

    # Virtual hosts for each service
    {{range .Services}}{{if .Domain}}
    server {
        listen 80;
        {{if .SSL}}
        listen {{.SSLPort}} ssl;
        {{end}}
        server_name {{.Domain}};
        
        {{if .SSL}}
        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/{{.SanitizedDomain}}.crt;
        ssl_certificate_key /etc/nginx/ssl/{{.SanitizedDomain}}.key;
        
        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off;
        
        # SSL session caching
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        
        # Redirect HTTP to HTTPS
        if ($scheme != "https") {
            return 301 https://$server_name$request_uri;
        }
        {{end}}

        {{if .IsPHP}}
        # PHP application configuration
        {{if eq .Framework "laravel"}}
        root /var/www/html/{{.Name}}/public;
        {{else}}
        root /var/www/html/{{.Name}};
        {{end}}
        index index.php index.html;
        
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }
        
        location ~ \.php$ {
            fastcgi_pass {{.Name}}:9000;
            fastcgi_index index.php;
            {{if eq .Framework "laravel"}}
            fastcgi_param SCRIPT_FILENAME /var/www/html/public$fastcgi_script_name;
            {{else}}
            fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;
            {{end}}
            include fastcgi_params;
        }
        
        location ~ /\.ht {
            deny all;
        }
        {{else}}
        location / {
            proxy_pass http://{{.Name}}_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        {{end}}
    }
    {{end}}{{end}}
}